Part 1: DSA
Problem 1: Stack
Implement a stack data structure in Python. The stack should support the following
operations:
● push(item) - Add an item to the top of the stack.
● pop() - Remove and return the item on the top of the stack.
● peek() - Return the item on the top of the stack without removing it.
● is_empty() - Return True if the stack is empty, else False.
Problem 2: Queue
Implement a queue data structure in Python. The queue should support the following
operations:
● enqueue(item) - Add an item to the back of the queue.
● dequeue() - Remove and return the item at the front of the queue.
● peek() - Return the item at the front of the queue without removing it.
● is_empty() - Return True if the queue is empty, else False.
Problem 3: Binary Search Tree
Implement a binary search tree (BST) data structure in Python. The BST should support the
following operations:
● insert(item) - Insert an item into the tree.
● delete(item) - Remove an item from the tree.
● search(item) - Return True if the item is in the tree, else False.
● size() - Return the number of nodes in the tree.
Part 2: Python
Problem 1: Anagram Checker
Write a Python function that takes in two strings and returns True if they are anagrams of
each other, else False. An anagram is a word or phrase formed by rearranging the letters of
a different word or phrase, typically using all the original letters exactly once.
Problem 2: FizzBuzz
Write a Python function that takes in an integer n and prints the numbers from 1 to n. For
multiples of 3, print "Fizz" instead of the number. For multiples of 5, print "Buzz" instead of
the number. For multiples of both 3 and 5, print "FizzBuzz" instead of the number.
Problem 3: Fibonacci Sequence
Write a Python function that takes in an integer n and returns the nth number in the
Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number
after the first two is the sum of the two preceding ones.
Instructions
Please complete all the problems in both parts of the assignment.
You can use any Python libraries that you are familiar with, except for libraries that
implement the data structures or algorithms that you need to implement. For example, you
cannot use the built-in Python list to implement the stack or queue. You can use any version
of Python that you prefer.
Submit your solutions as a Python file or Jupyter Notebook, along with any necessary test
cases or instructions on how to run the code. Upload to github and share the github repo
link.
Please also include a brief write-up discussing your approach to the problems and any
trade-offs that you made.